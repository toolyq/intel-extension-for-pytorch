name: Build Intel Extension for PyTorch

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  build_windows:
    runs-on: windows-latest # Using the latest Windows Server environment

    defaults:
      run:
        shell: powershell # Using PowerShell for better scripting on Windows

    steps:
      - name: Define oneAPI Variables
        id: oneapi_vars
        run: |
          # IMPORTANT: Keep this URL updated if you change oneAPI versions
          $InstallerUrl = "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/e5785fb3-b5a7-4b97-89bc-918adab1f77d/intel-oneapi-base-toolkit-2025.1.3.8_offline.exe"
          $InstallDir = "C:\Program Files (x86)\Intel\oneAPI"
          # Create a version string from the URL or hardcode it for the cache key
          # This helps ensure the cache is specific to this version of oneAPI
          $OneApiVersionKey = "2025.1.3.8" # Or extract programmatically if URL structure is consistent
          echo "installer_url=$InstallerUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "install_dir=$InstallDir" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "oneapi_version_key=$OneApiVersionKey" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        shell: powershell
        
      - name: Cache Intel oneAPI Installation
        id: cache-oneapi
        uses: actions/cache@v4
        with:
          path: ${{ steps.oneapi_vars.outputs.install_dir }}
          # Key no longer includes workflow file hash.
          # Cache will be reused as long as OS and oneapi_version_key are the same,
          # regardless of changes to this workflow file (unless those changes alter the oneapi_version_key).
          key: ${{ runner.os }}-oneapi-${{ steps.oneapi_vars.outputs.oneapi_version_key }}
          # Restore key is set to be very specific.
          # Only an exact match for OS and oneapi_version_key will be restored.
          restore-keys: |
            ${{ runner.os }}-oneapi-${{ steps.oneapi_vars.outputs.oneapi_version_key }}

      - name: Install Intel oneAPI Base Toolkit
        id: install_oneapi
        run: |
          $InstallerUrl = "${{ steps.oneapi_vars.outputs.installer_url }}"
          $InstallerPath = "C:\temp\oneapi_installer.exe"
          $InstallDir = "${{ steps.oneapi_vars.outputs.install_dir }}"
          $SetvarsFile = Join-Path $InstallDir "setvars.bat"

          # Check if cache was hit and setvars.bat exists
          if ('${{ steps.cache-oneapi.outputs.cache-hit }}' == 'true') {
            echo "Cache hit reported for oneAPI (key: ${{ runner.os }}-oneapi-${{ steps.oneapi_vars.outputs.oneapi_version_key }})."
            if (Test-Path $SetvarsFile) {
              echo "oneAPI found in cache (setvars.bat exists at $SetvarsFile)."
              echo "setvars_path=$SetvarsFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 0 # Exit successfully, skipping download/install
            } else {
              echo "::warning:: Cache hit reported, but $SetvarsFile not found at '$SetvarsFile' in the restored cache."
              echo "This could indicate an incomplete or corrupted cache, or that the cached installation was different."
              echo "Proceeding with a fresh installation to ensure correctness."
            }
          } else {
            echo "Cache miss for oneAPI (key: ${{ runner.os }}-oneapi-${{ steps.oneapi_vars.outputs.oneapi_version_key }}). Proceeding with download and installation."
          }

          echo "Attempting to download and install Intel oneAPI Base Toolkit..."
          $ProgressPreference = 'SilentlyContinue'
          New-Item -ItemType Directory -Force -Path "C:\temp" | Out-Null
          echo "Downloading oneAPI Base Toolkit installer from $InstallerUrl..."
          try {
            if ($InstallerUrl -match "YOUR_ONEAPI_BASEKIT_OFFLINE_INSTALLER_URL_HERE") { # More robust check
                echo "::error::Installer URL is still the placeholder. Please update it in the workflow file."
                exit 1
            }
            Invoke-WebRequest -Uri $InstallerUrl -OutFile $InstallerPath -UseBasicParsing
            echo "Installer downloaded. Starting silent installation..."

            $targetComponents = "intel.oneapi.win.cpp-dpcpp-common:intel.oneapi.win.mkl.devel:intel.oneapi.win.tbb.devel"
            $oneApiArgs = "-s -a --silent --eula accept --components=$targetComponents -p=NEED_VS2022_INTEGRATION=0 --install-dir=""$InstallDir"""
            
            echo "Running installer with arguments: $oneApiArgs"
            Start-Process -FilePath $InstallerPath -ArgumentList $oneApiArgs -Wait -NoNewWindow
            
            if ($LASTEXITCODE -ne 0) {
              echo "::error::oneAPI installation failed with exit code $LASTEXITCODE."
              # exit 1 # Consider if you want to halt or allow further debugging steps
            } else {
              echo "oneAPI installation finished successfully."
            }
            
            if (Test-Path $SetvarsFile) {
              echo "setvars_path=$SetvarsFile" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            } else {
              echo "::error::setvars.bat not found at $SetvarsFile after oneAPI installation."
              echo "Listing contents of $InstallDir to debug:"
              Get-ChildItem -Path $InstallDir -Recurse -ErrorAction SilentlyContinue | Select-Object FullName, Length, LastWriteTime
              exit 1
            }
          } catch {
            echo "::error::Failed to download or run oneAPI installer: $($_.Exception.Message)"
            exit 1
          }
        shell: powershell

      - name: Checkout IPEX Repository
        uses: actions/checkout@v4
        with:
          repository: 'intel/intel-extension-for-pytorch' # Using official repo as per previous discussion
          ref: 'release/xpu/2.7.10'                  # Using the agreed-upon ref
          submodules: 'recursive'

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools ninja psutil packaging PyYAML
          echo "Installing PyTorch 2.7.0 XPU version..."
          pip install torch==2.7.0 torchvision torchaudio --index-url https://download.pytorch.org/whl/xpu

      - name: Build Intel Extension for PyTorch
        id: build_ipex
        env:
          PYTHONIOENCODING: "UTF-8"
          PYTHONUTF8: "1"
        run: |
          # This step's output is critical. It will be set by the 'Install Intel oneAPI' step
          # whether oneAPI was found in cache or freshly installed.
          $SetvarsPath = "${{ steps.install_oneapi.outputs.setvars_path }}"

          if (-not $SetvarsPath -or !(Test-Path $SetvarsPath)) {
            echo "::error::setvars.bat path ('$SetvarsPath') not found or not valid from previous step."
            # As a fallback, you could try the default again, but ideally, the install_oneapi step handles this.
            $DefaultSetvarsPath = "${{ steps.oneapi_vars.outputs.install_dir }}\setvars.bat"
            echo "Trying default Intel oneAPI setvars.bat path: $DefaultSetvarsPath"
            if (Test-Path $DefaultSetvarsPath) {
              $SetvarsPath = $DefaultSetvarsPath
            } else {
              echo "::error::Default setvars.bat ('$DefaultSetvarsPath') also not found. Cannot proceed with build."
              exit 1
            }
          }

          echo "Using setvars.bat from: $SetvarsPath"

          $ScriptContent = @"
          @echo off
          echo Calling "$($SetvarsPath)" intel64 vs2022...
          call "$($SetvarsPath)" intel64 vs2022
          if %errorlevel% neq 0 (
            echo ::error::Failed to initialize oneAPI environment using setvars.bat. Exit code: %errorlevel%
            exit /b %errorlevel%
          )
          echo Environment initialized. Starting Python build for IPEX...

          set USE_NINJA=1
          python setup.py bdist_wheel
          if %errorlevel% neq 0 (
            echo ::error::Python build (setup.py bdist_wheel) failed. Exit code: %errorlevel%
            exit /b %errorlevel%
          )
          echo Build command finished successfully.
          "@

          $TempBatchDir = "C:\temp"
          $TempBatchFile = Join-Path $TempBatchDir "build_script.bat"
          New-Item -ItemType Directory -Force -Path $TempBatchDir | Out-Null
          Set-Content -Path $TempBatchFile -Value $ScriptContent -Encoding Ascii

          echo "Executing temporary build script: $TempBatchFile"
          cmd.exe /c "$TempBatchFile"

          if ($LASTEXITCODE -ne 0) {
            echo "::error::Build script execution failed with exit code $LASTEXITCODE"
            exit 1
          }
          echo "Build process completed via batch script."
        shell: powershell

      - name: Upload Wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ipex-wheel-windows-py310-torch27
          path: dist/*.whl
          if-no-files-found: error
